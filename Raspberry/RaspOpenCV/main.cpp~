#include <iostream>
#include "opencv.h"
#include "moviment.h"
#include <pthread.h>
#include <time.h>

using namespace std;

bool canCapture;
Mat frame;
int num;
bool walk;

void *processing_face(void* param)
{
    OpenCV *openCV = (OpenCV*)param;
    openCV->detectFace(canCapture, frame, num);
}

void chamaOpenCVFace(OpenCV openCV){
    printf("Vai chamar Thread de FACE\n");
    pthread_t processingFace;
    pthread_create(&processingFace, NULL, &processing_face, &openCV);
    pthread_join(processingFace,NULL);    
    printf("Finalizou Thread de FACE\n\n");
}

void *processing_color(void* param)
{
    OpenCV *openCV = (OpenCV*)param;
    openCV->detectColor(canCapture, frame, num);
}

void chamaOpenCVColor(OpenCV openCV){
    printf("Vai chamar Thread de Cor\n");
    pthread_t processingColor;
    pthread_create(&processingColor, NULL, &processing_color, &openCV);
    pthread_join(processingColor,NULL);    
    printf("Finalizou Thread de Cor\n\n");
}

void *moviment_car(void* param)
{
    Moviment *mov = (Moviment*)param;
    mov->startMoviment(walk);
}

void chamaMoviment(Moviment mov){
    printf("Vai chamar Thread de movimento\n");
    pthread_t movimentCar;
    pthread_create(&movimentCar, NULL, &moviment_car, &mov);
    pthread_join(movimentCar,NULL);    
    printf("Finalizou Thread de movimento\n\n");
}

void printBuild(){
    time_t rawtime;
    struct tm * timeinfo();
    time (&rawtime);
    printf("Tempo: %s", ctime(&rawtime));
}

int main()
{
    canCapture = true;
    num = 0;
    walk = true;

    Moviment mov;

    OpenCV openCV;
    printf("Iniciou Aplicacao\n"); 

    cv::VideoCapture capture(0);
    if( capture.isOpened() )
    {
 	printf("Captura rodando!\n");
    }

    while(true){	

	if(walk) mov.executeFrente(walk);

        if(canCapture){
           //printBuild();
           capture >> frame;
	   chamaOpenCVFace(openCV);
	   chamaOpenCVColor(openCV);
        }
        else{
           printf("Aguardando deteccao");
        }
    }

    return 0;
}
